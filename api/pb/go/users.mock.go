// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users.proto

package plantmanager

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type V1UsersMock struct{}

func (m *V1UsersMock) Login(ctx context.Context, req *LoginRequest) (*LoginReply, error) {
	res :=
		&LoginReply{
			Token: "blanditiis",
			Permissions: []*Permission{
				&Permission{
					Id:     661,
					Name:   "in",
					UserId: 718,
				},
				&Permission{
					Id:     356,
					Name:   "ratione",
					UserId: 779,
				},
				&Permission{
					Id:     483,
					Name:   "et",
					UserId: 0,
				},
				&Permission{
					Id:     768,
					Name:   "praesentium",
					UserId: 869,
				},
				&Permission{
					Id:     599,
					Name:   "doloremque",
					UserId: 848,
				},
				&Permission{
					Id:     229,
					Name:   "nobis",
					UserId: 585,
				},
				&Permission{
					Id:     726,
					Name:   "occaecati",
					UserId: 236,
				},
				&Permission{
					Id:     41,
					Name:   "doloribus",
					UserId: 66,
				},
			},
		}
	return res, nil
}
func (m *V1UsersMock) VerifyJWT(ctx context.Context, req *VerifyJWTRequest) (*VerifyJWTReply, error) {
	res :=
		&VerifyJWTReply{
			Valid:         true,
			HasPermission: true,
			Permissions: []*Permission{
				&Permission{
					Id:     456,
					Name:   "blanditiis",
					UserId: 939,
				},
				&Permission{
					Id:     784,
					Name:   "perspiciatis",
					UserId: 846,
				},
				&Permission{
					Id:     158,
					Name:   "omnis",
					UserId: 80,
				},
				&Permission{
					Id:     554,
					Name:   "dolorem",
					UserId: 459,
				},
				&Permission{
					Id:     850,
					Name:   "unde",
					UserId: 952,
				},
				&Permission{
					Id:     338,
					Name:   "ut",
					UserId: 496,
				},
				&Permission{
					Id:     251,
					Name:   "corporis",
					UserId: 84,
				},
				&Permission{
					Id:     279,
					Name:   "quia",
					UserId: 562,
				},
			},
		}
	return res, nil
}
func (m *V1UsersMock) AddUser(ctx context.Context, req *AddUserRequest) (*AddUserReply, error) {
	res :=
		&AddUserReply{
			User: &User{
				Id:         357,
				FirstName:  "et",
				LastName:   "labore",
				Email:      "doloribus@Mycat.biz",
				CustomerId: 676,
			},
		}
	return res, nil
}
func (m *V1UsersMock) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserReply, error) {
	res :=
		&GetUserReply{
			User: &User{
				Id:         689,
				FirstName:  "quia",
				LastName:   "deleniti",
				Email:      "WalterBryant@Oba.com",
				CustomerId: 770,
			},
		}
	return res, nil
}
func (m *V1UsersMock) FindUsers(ctx context.Context, req *FindUsersRequest) (*FindUsersReply, error) {
	res :=
		&FindUsersReply{
			Users: []*User{
				&User{
					Id:         547,
					FirstName:  "nisi",
					LastName:   "provident",
					Email:      "aut_beatae@Vipe.edu",
					CustomerId: 984,
				},
				&User{
					Id:         570,
					FirstName:  "delectus",
					LastName:   "id",
					Email:      "illo_quae@Kayveo.mil",
					CustomerId: 580,
				},
				&User{
					Id:         557,
					FirstName:  "fuga",
					LastName:   "quibusdam",
					Email:      "RyanSullivan@Voonix.biz",
					CustomerId: 710,
				},
				&User{
					Id:         319,
					FirstName:  "quia",
					LastName:   "libero",
					Email:      "BettyHall@Brightdog.net",
					CustomerId: 600,
				},
				&User{
					Id:         428,
					FirstName:  "unde",
					LastName:   "cum",
					Email:      "quia_sit_facere@Shufflester.name",
					CustomerId: 849,
				},
				&User{
					Id:         714,
					FirstName:  "non",
					LastName:   "velit",
					Email:      "JessicaArmstrong@Skivee.edu",
					CustomerId: 135,
				},
				&User{
					Id:         874,
					FirstName:  "eaque",
					LastName:   "cumque",
					Email:      "MartinDunn@Eidel.mil",
					CustomerId: 333,
				},
				&User{
					Id:         508,
					FirstName:  "id",
					LastName:   "consequatur",
					Email:      "JustinThomas@Flashspan.info",
					CustomerId: 419,
				},
			},
		}
	return res, nil
}
