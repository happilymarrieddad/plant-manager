// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users.proto

package plantmanager

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type V1UsersMock struct{}

func (m *V1UsersMock) Login(ctx context.Context, req *LoginRequest) (*LoginReply, error) {
	res :=
		&LoginReply{
			Token: "dolorum",
			Permissions: []*Permission{
				&Permission{
					Id:     797,
					Name:   "ut",
					UserId: 972,
				},
				&Permission{
					Id:     274,
					Name:   "provident",
					UserId: 609,
				},
				&Permission{
					Id:     90,
					Name:   "reprehenderit",
					UserId: 383,
				},
				&Permission{
					Id:     223,
					Name:   "veniam",
					UserId: 309,
				},
				&Permission{
					Id:     594,
					Name:   "unde",
					UserId: 221,
				},
				&Permission{
					Id:     132,
					Name:   "placeat",
					UserId: 584,
				},
				&Permission{
					Id:     428,
					Name:   "est",
					UserId: 432,
				},
				&Permission{
					Id:     384,
					Name:   "ut",
					UserId: 406,
				},
			},
		}
	return res, nil
}
func (m *V1UsersMock) VerifyJWT(ctx context.Context, req *VerifyJWTRequest) (*VerifyJWTReply, error) {
	res :=
		&VerifyJWTReply{
			Valid:         true,
			HasPermission: false,
			Permissions: []*Permission{
				&Permission{
					Id:     376,
					Name:   "aut",
					UserId: 456,
				},
				&Permission{
					Id:     835,
					Name:   "totam",
					UserId: 631,
				},
				&Permission{
					Id:     250,
					Name:   "eum",
					UserId: 673,
				},
				&Permission{
					Id:     483,
					Name:   "distinctio",
					UserId: 762,
				},
				&Permission{
					Id:     17,
					Name:   "facere",
					UserId: 695,
				},
				&Permission{
					Id:     488,
					Name:   "earum",
					UserId: 185,
				},
				&Permission{
					Id:     4,
					Name:   "voluptas",
					UserId: 911,
				},
				&Permission{
					Id:     547,
					Name:   "cumque",
					UserId: 153,
				},
			},
		}
	return res, nil
}
func (m *V1UsersMock) AddUser(ctx context.Context, req *AddUserRequest) (*AddUserReply, error) {
	res :=
		&AddUserReply{
			User: &User{
				Id:         837,
				FirstName:  "quam",
				LastName:   "et",
				Email:      "wBurton@Centizu.gov",
				CustomerId: 229,
			},
		}
	return res, nil
}
func (m *V1UsersMock) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserReply, error) {
	res :=
		&GetUserReply{
			User: &User{
				Id:         850,
				FirstName:  "aliquid",
				LastName:   "ut",
				Email:      "quia_eaque_sed@Dabshots.name",
				CustomerId: 130,
			},
		}
	return res, nil
}
func (m *V1UsersMock) FindUsers(ctx context.Context, req *FindUsersRequest) (*FindUsersReply, error) {
	res :=
		&FindUsersReply{
			Users: []*User{
				&User{
					Id:         185,
					FirstName:  "et",
					LastName:   "quia",
					Email:      "4Williams@Talane.name",
					CustomerId: 970,
				},
				&User{
					Id:         296,
					FirstName:  "itaque",
					LastName:   "optio",
					Email:      "1Kim@Skilith.info",
					CustomerId: 401,
				},
				&User{
					Id:         161,
					FirstName:  "voluptatem",
					LastName:   "aut",
					Email:      "sunt_et_et@Gevee.org",
					CustomerId: 598,
				},
				&User{
					Id:         986,
					FirstName:  "laborum",
					LastName:   "voluptatem",
					Email:      "9Foster@Yabox.net",
					CustomerId: 775,
				},
				&User{
					Id:         277,
					FirstName:  "asperiores",
					LastName:   "ullam",
					Email:      "hGraham@Yamia.biz",
					CustomerId: 777,
				},
				&User{
					Id:         530,
					FirstName:  "eum",
					LastName:   "et",
					Email:      "lBarnes@Reallinks.com",
					CustomerId: 710,
				},
				&User{
					Id:         662,
					FirstName:  "illo",
					LastName:   "est",
					Email:      "KevinRamirez@Shuffledrive.org",
					CustomerId: 731,
				},
				&User{
					Id:         88,
					FirstName:  "iusto",
					LastName:   "et",
					Email:      "eos@Yoveo.gov",
					CustomerId: 504,
				},
			},
		}
	return res, nil
}
