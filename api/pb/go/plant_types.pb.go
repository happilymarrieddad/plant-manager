// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: plant_types.proto

package plantmanager

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetPlantTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	JWT string `protobuf:"bytes,2,opt,name=JWT,proto3" json:"JWT,omitempty"`
}

func (x *GetPlantTypeRequest) Reset() {
	*x = GetPlantTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlantTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantTypeRequest) ProtoMessage() {}

func (x *GetPlantTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantTypeRequest.ProtoReflect.Descriptor instead.
func (*GetPlantTypeRequest) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlantTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPlantTypeRequest) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

type GetPlantTypeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantType *PlantType `protobuf:"bytes,1,opt,name=plantType,proto3" json:"plantType,omitempty"`
}

func (x *GetPlantTypeReply) Reset() {
	*x = GetPlantTypeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlantTypeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantTypeReply) ProtoMessage() {}

func (x *GetPlantTypeReply) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantTypeReply.ProtoReflect.Descriptor instead.
func (*GetPlantTypeReply) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlantTypeReply) GetPlantType() *PlantType {
	if x != nil {
		return x.PlantType
	}
	return nil
}

type FindPlantTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	JWT    string `protobuf:"bytes,3,opt,name=JWT,proto3" json:"JWT,omitempty"`
}

func (x *FindPlantTypesRequest) Reset() {
	*x = FindPlantTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPlantTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPlantTypesRequest) ProtoMessage() {}

func (x *FindPlantTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPlantTypesRequest.ProtoReflect.Descriptor instead.
func (*FindPlantTypesRequest) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{2}
}

func (x *FindPlantTypesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindPlantTypesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindPlantTypesRequest) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

type FindPlantTypesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantTypes []*PlantType `protobuf:"bytes,1,rep,name=plantTypes,proto3" json:"plantTypes,omitempty"`
}

func (x *FindPlantTypesReply) Reset() {
	*x = FindPlantTypesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPlantTypesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPlantTypesReply) ProtoMessage() {}

func (x *FindPlantTypesReply) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPlantTypesReply.ProtoReflect.Descriptor instead.
func (*FindPlantTypesReply) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{3}
}

func (x *FindPlantTypesReply) GetPlantTypes() []*PlantType {
	if x != nil {
		return x.PlantTypes
	}
	return nil
}

type CreatePlantTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	JWT  string `protobuf:"bytes,2,opt,name=JWT,proto3" json:"JWT,omitempty"`
}

func (x *CreatePlantTypeRequest) Reset() {
	*x = CreatePlantTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlantTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlantTypeRequest) ProtoMessage() {}

func (x *CreatePlantTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlantTypeRequest.ProtoReflect.Descriptor instead.
func (*CreatePlantTypeRequest) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePlantTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlantTypeRequest) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

type CreatePlantTypeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantType *PlantType `protobuf:"bytes,1,opt,name=plantType,proto3" json:"plantType,omitempty"`
}

func (x *CreatePlantTypeReply) Reset() {
	*x = CreatePlantTypeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlantTypeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlantTypeReply) ProtoMessage() {}

func (x *CreatePlantTypeReply) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlantTypeReply.ProtoReflect.Descriptor instead.
func (*CreatePlantTypeReply) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePlantTypeReply) GetPlantType() *PlantType {
	if x != nil {
		return x.PlantType
	}
	return nil
}

type DestroyPlantTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	JWT string `protobuf:"bytes,2,opt,name=JWT,proto3" json:"JWT,omitempty"`
}

func (x *DestroyPlantTypeRequest) Reset() {
	*x = DestroyPlantTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyPlantTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyPlantTypeRequest) ProtoMessage() {}

func (x *DestroyPlantTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyPlantTypeRequest.ProtoReflect.Descriptor instead.
func (*DestroyPlantTypeRequest) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{6}
}

func (x *DestroyPlantTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DestroyPlantTypeRequest) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

type UpdatePlantTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	JWT  string `protobuf:"bytes,3,opt,name=JWT,proto3" json:"JWT,omitempty"`
}

func (x *UpdatePlantTypeRequest) Reset() {
	*x = UpdatePlantTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlantTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlantTypeRequest) ProtoMessage() {}

func (x *UpdatePlantTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plant_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlantTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlantTypeRequest) Descriptor() ([]byte, []int) {
	return file_plant_types_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePlantTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlantTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePlantTypeRequest) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

var File_plant_types_proto protoreflect.FileDescriptor

var file_plant_types_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4a, 0x57, 0x54, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4a, 0x57, 0x54, 0x22, 0x47, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3e, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4a,
	0x57, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x57, 0x54, 0x22, 0x46, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a,
	0x57, 0x54, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a,
	0x57, 0x54, 0x32, 0xb5, 0x03, 0x0a, 0x0c, 0x56, 0x31, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plant_types_proto_rawDescOnce sync.Once
	file_plant_types_proto_rawDescData = file_plant_types_proto_rawDesc
)

func file_plant_types_proto_rawDescGZIP() []byte {
	file_plant_types_proto_rawDescOnce.Do(func() {
		file_plant_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_plant_types_proto_rawDescData)
	})
	return file_plant_types_proto_rawDescData
}

var file_plant_types_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_plant_types_proto_goTypes = []interface{}{
	(*GetPlantTypeRequest)(nil),     // 0: plant_types.GetPlantTypeRequest
	(*GetPlantTypeReply)(nil),       // 1: plant_types.GetPlantTypeReply
	(*FindPlantTypesRequest)(nil),   // 2: plant_types.FindPlantTypesRequest
	(*FindPlantTypesReply)(nil),     // 3: plant_types.FindPlantTypesReply
	(*CreatePlantTypeRequest)(nil),  // 4: plant_types.CreatePlantTypeRequest
	(*CreatePlantTypeReply)(nil),    // 5: plant_types.CreatePlantTypeReply
	(*DestroyPlantTypeRequest)(nil), // 6: plant_types.DestroyPlantTypeRequest
	(*UpdatePlantTypeRequest)(nil),  // 7: plant_types.UpdatePlantTypeRequest
	(*PlantType)(nil),               // 8: types.PlantType
	(*EmptyReply)(nil),              // 9: types.EmptyReply
}
var file_plant_types_proto_depIdxs = []int32{
	8, // 0: plant_types.GetPlantTypeReply.plantType:type_name -> types.PlantType
	8, // 1: plant_types.FindPlantTypesReply.plantTypes:type_name -> types.PlantType
	8, // 2: plant_types.CreatePlantTypeReply.plantType:type_name -> types.PlantType
	0, // 3: plant_types.V1PlantTypes.GetPlantType:input_type -> plant_types.GetPlantTypeRequest
	2, // 4: plant_types.V1PlantTypes.FindPlantTypes:input_type -> plant_types.FindPlantTypesRequest
	4, // 5: plant_types.V1PlantTypes.CreatePlantType:input_type -> plant_types.CreatePlantTypeRequest
	7, // 6: plant_types.V1PlantTypes.UpdatePlantType:input_type -> plant_types.UpdatePlantTypeRequest
	6, // 7: plant_types.V1PlantTypes.DestroyPlantType:input_type -> plant_types.DestroyPlantTypeRequest
	1, // 8: plant_types.V1PlantTypes.GetPlantType:output_type -> plant_types.GetPlantTypeReply
	3, // 9: plant_types.V1PlantTypes.FindPlantTypes:output_type -> plant_types.FindPlantTypesReply
	5, // 10: plant_types.V1PlantTypes.CreatePlantType:output_type -> plant_types.CreatePlantTypeReply
	9, // 11: plant_types.V1PlantTypes.UpdatePlantType:output_type -> types.EmptyReply
	9, // 12: plant_types.V1PlantTypes.DestroyPlantType:output_type -> types.EmptyReply
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_plant_types_proto_init() }
func file_plant_types_proto_init() {
	if File_plant_types_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_plant_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlantTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlantTypeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPlantTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPlantTypesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlantTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlantTypeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyPlantTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlantTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plant_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plant_types_proto_goTypes,
		DependencyIndexes: file_plant_types_proto_depIdxs,
		MessageInfos:      file_plant_types_proto_msgTypes,
	}.Build()
	File_plant_types_proto = out.File
	file_plant_types_proto_rawDesc = nil
	file_plant_types_proto_goTypes = nil
	file_plant_types_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// V1PlantTypesClient is the client API for V1PlantTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type V1PlantTypesClient interface {
	GetPlantType(ctx context.Context, in *GetPlantTypeRequest, opts ...grpc.CallOption) (*GetPlantTypeReply, error)
	FindPlantTypes(ctx context.Context, in *FindPlantTypesRequest, opts ...grpc.CallOption) (*FindPlantTypesReply, error)
	CreatePlantType(ctx context.Context, in *CreatePlantTypeRequest, opts ...grpc.CallOption) (*CreatePlantTypeReply, error)
	UpdatePlantType(ctx context.Context, in *UpdatePlantTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	DestroyPlantType(ctx context.Context, in *DestroyPlantTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1PlantTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1PlantTypesClient(cc grpc.ClientConnInterface) V1PlantTypesClient {
	return &v1PlantTypesClient{cc}
}

func (c *v1PlantTypesClient) GetPlantType(ctx context.Context, in *GetPlantTypeRequest, opts ...grpc.CallOption) (*GetPlantTypeReply, error) {
	out := new(GetPlantTypeReply)
	err := c.cc.Invoke(ctx, "/plant_types.V1PlantTypes/GetPlantType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PlantTypesClient) FindPlantTypes(ctx context.Context, in *FindPlantTypesRequest, opts ...grpc.CallOption) (*FindPlantTypesReply, error) {
	out := new(FindPlantTypesReply)
	err := c.cc.Invoke(ctx, "/plant_types.V1PlantTypes/FindPlantTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PlantTypesClient) CreatePlantType(ctx context.Context, in *CreatePlantTypeRequest, opts ...grpc.CallOption) (*CreatePlantTypeReply, error) {
	out := new(CreatePlantTypeReply)
	err := c.cc.Invoke(ctx, "/plant_types.V1PlantTypes/CreatePlantType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PlantTypesClient) UpdatePlantType(ctx context.Context, in *UpdatePlantTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/plant_types.V1PlantTypes/UpdatePlantType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PlantTypesClient) DestroyPlantType(ctx context.Context, in *DestroyPlantTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/plant_types.V1PlantTypes/DestroyPlantType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1PlantTypesServer is the server API for V1PlantTypes service.
type V1PlantTypesServer interface {
	GetPlantType(context.Context, *GetPlantTypeRequest) (*GetPlantTypeReply, error)
	FindPlantTypes(context.Context, *FindPlantTypesRequest) (*FindPlantTypesReply, error)
	CreatePlantType(context.Context, *CreatePlantTypeRequest) (*CreatePlantTypeReply, error)
	UpdatePlantType(context.Context, *UpdatePlantTypeRequest) (*EmptyReply, error)
	DestroyPlantType(context.Context, *DestroyPlantTypeRequest) (*EmptyReply, error)
}

// UnimplementedV1PlantTypesServer can be embedded to have forward compatible implementations.
type UnimplementedV1PlantTypesServer struct {
}

func (*UnimplementedV1PlantTypesServer) GetPlantType(context.Context, *GetPlantTypeRequest) (*GetPlantTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantType not implemented")
}
func (*UnimplementedV1PlantTypesServer) FindPlantTypes(context.Context, *FindPlantTypesRequest) (*FindPlantTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPlantTypes not implemented")
}
func (*UnimplementedV1PlantTypesServer) CreatePlantType(context.Context, *CreatePlantTypeRequest) (*CreatePlantTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlantType not implemented")
}
func (*UnimplementedV1PlantTypesServer) UpdatePlantType(context.Context, *UpdatePlantTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlantType not implemented")
}
func (*UnimplementedV1PlantTypesServer) DestroyPlantType(context.Context, *DestroyPlantTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPlantType not implemented")
}

func RegisterV1PlantTypesServer(s *grpc.Server, srv V1PlantTypesServer) {
	s.RegisterService(&_V1PlantTypes_serviceDesc, srv)
}

func _V1PlantTypes_GetPlantType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PlantTypesServer).GetPlantType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plant_types.V1PlantTypes/GetPlantType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PlantTypesServer).GetPlantType(ctx, req.(*GetPlantTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PlantTypes_FindPlantTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPlantTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PlantTypesServer).FindPlantTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plant_types.V1PlantTypes/FindPlantTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PlantTypesServer).FindPlantTypes(ctx, req.(*FindPlantTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PlantTypes_CreatePlantType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlantTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PlantTypesServer).CreatePlantType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plant_types.V1PlantTypes/CreatePlantType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PlantTypesServer).CreatePlantType(ctx, req.(*CreatePlantTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PlantTypes_UpdatePlantType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlantTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PlantTypesServer).UpdatePlantType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plant_types.V1PlantTypes/UpdatePlantType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PlantTypesServer).UpdatePlantType(ctx, req.(*UpdatePlantTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PlantTypes_DestroyPlantType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyPlantTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PlantTypesServer).DestroyPlantType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plant_types.V1PlantTypes/DestroyPlantType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PlantTypesServer).DestroyPlantType(ctx, req.(*DestroyPlantTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _V1PlantTypes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plant_types.V1PlantTypes",
	HandlerType: (*V1PlantTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlantType",
			Handler:    _V1PlantTypes_GetPlantType_Handler,
		},
		{
			MethodName: "FindPlantTypes",
			Handler:    _V1PlantTypes_FindPlantTypes_Handler,
		},
		{
			MethodName: "CreatePlantType",
			Handler:    _V1PlantTypes_CreatePlantType_Handler,
		},
		{
			MethodName: "UpdatePlantType",
			Handler:    _V1PlantTypes_UpdatePlantType_Handler,
		},
		{
			MethodName: "DestroyPlantType",
			Handler:    _V1PlantTypes_DestroyPlantType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plant_types.proto",
}
